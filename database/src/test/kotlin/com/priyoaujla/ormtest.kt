package com.priyoaujla

import org.junit.Assert.assertEquals
import org.junit.Assert.assertNull
import org.junit.Rule
import org.junit.Test
import java.sql.Connection
import java.sql.ResultSet
import javax.sql.DataSource

class OrmTest {

    @JvmField
    @Rule
    val database = TestDatabase(before = ::setup, after = ::tearDown, databasePort = 9002)

    private val userTable: Table<User> = UserTable("user", database.dataSource)

    private fun setup(connection: Connection) {
        connection.use {
            it.createStatement().executeUpdate("""CREATE TABLE user (
            | id INT NOT NULL IDENTITY,
            | name VARCHAR(255) NOT NULL,
            | age INT NOT NULL,
            | fav_colour VARCHAR(64),
            | PRIMARY KEY (id)
            | );
        """.trimMargin())
        }
    }

    private fun tearDown(connection: Connection) {
        connection.use {
            it.createStatement().executeUpdate("""DROP TABLE user;""".trimMargin())
        }
    }

    @Test
    fun `inserting and retrieving`() {
        val user = User(name = Name("Betty"), age = Age(23), favColour = Colour("Orange"))
        userTable.insert(user)
        val result = userTable.get(UserTable.idColumn to UserTable.idColumn.withValue(0))

        assertEquals(user, result)
    }

    @Test
    fun `inserting and updating`() {
        userTable.insert(User(name = Name("Betty"), age = Age(23), favColour = Colour("Orange")))
        val oldUser = userTable.get(UserTable.idColumn to UserTable.idColumn.withValue(0))!!
        val newUser = oldUser.copy(name = Name("Julie"), age = Age(55), favColour = Colour("Blue"))
        userTable.update(newUser)
        val result = userTable.get(UserTable.idColumn to UserTable.idColumn.withValue(0))

        assertEquals(newUser, result)
    }

    @Test
    fun `inserting and deleting`() {
        userTable.insert(User(name = Name("Betty"), age = Age(23), favColour = Colour("Orange")))
        userTable.delete(userTable.get(UserTable.idColumn to UserTable.idColumn.withValue(0))!!)

        assertNull(userTable.get(UserTable.idColumn to UserTable.idColumn.withValue(0)))
    }

    @Test
    fun `inserting nullable value`() {
        val user = User(name = Name("Betty"), age = Age(23), favColour = null)
        userTable.insert(user)
        val result = userTable.get(UserTable.idColumn to UserTable.idColumn.withValue(0))

        assertEquals(user, result)
    }
}


class UserTable(override val name: String, dataSource: DataSource) : Table<User>(dataSource) {

    companion object {
        val idColumn = AutoGeneratedKeyColumn(KeyColumn(IntColumn(ColumnName("id"), required = true)))
        val nameColumn = NameColumn(required = true)
        val ageColumn = AgeColumn(required = true)
        val favColourColumn = ColourColumn(required = false)
    }

    override val columns = setOf(
            idColumn,
            nameColumn,
            ageColumn,
            favColourColumn
    )

    override fun mapTo(thing: User): Set<ColumnValueSetter> {
        val columnValues = mutableSetOf(
                nameColumn.withValue(thing.name),
                ageColumn.withValue(thing.age)
        )

        thing.favColour?.let { columnValues.add(favColourColumn.withValue(it)) }
        return columnValues
    }

    override fun mapFrom(resultSet: ResultSet): User {
        return User(
                resultSet.getInt(idColumn.name.value),
                Name(resultSet.getString(nameColumn.name.value)),
                Age(resultSet.getInt(ageColumn.name.value)),
                resultSet.getString(favColourColumn.name.value)?.let { Colour(it) }
        )
    }

    override fun uniqueKey(thing: User) = idColumn.withValue(thing.id)
}

data class Name(val value: String)
data class NameColumn(
        override val name: ColumnName = ColumnName("name"),
        override val required: Boolean
) : TypeColumn<Name> {

    private val delegate = StringColumn(name, required)

    override fun withValue(value: Name): ColumnValueSetter = delegate.withValue(value.value).copy(column = this)
}

data class Age(val value: Int)
data class AgeColumn(
        override val name: ColumnName = ColumnName("age"),
        override val required: Boolean
) : TypeColumn<Age> {

    private val delegate = IntColumn(name, required)

    override fun withValue(value: Age): ColumnValueSetter = delegate.withValue(value.value).copy(column = this)
}

data class Colour(val value: String)
data class ColourColumn(
        override val name: ColumnName = ColumnName("fav_colour"),
        override val required: Boolean
) : TypeColumn<Colour> {

    private val delegate = StringColumn(name, required)

    override fun withValue(value: Colour): ColumnValueSetter = delegate.withValue(value.value).copy(column = this)
}

data class User(val id: Int = 0, val name: Name, val age: Age, val favColour: Colour?)

