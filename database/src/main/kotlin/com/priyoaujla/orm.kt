package com.priyoaujla

data class ColumnName(val value: String)

interface Column {
    val name: ColumnName
    val required: Boolean

    fun withValue(value: Any): ColumnValue
    fun toSqlString(value: Any): String
}

data class ColumnValue(val column: Column, val value: Any)

data class StringColumn(override val name: ColumnName, override val required: Boolean) : Column {

    override fun withValue(value: Any): ColumnValue {
        if (value is String) {
            return ColumnValue(this, value)
        } else {
            error("Wrong type")
        }
    }

    override fun toSqlString(value: Any): String {
        if (value is String) {
            return "'$value'"
        } else {
            error("Wrong type")
        }
    }
}

data class IntColumn(override val name: ColumnName, override val required: Boolean) : Column {

    override fun withValue(value: Any): ColumnValue {
        if (value is Int) {
            return ColumnValue(this, value)
        } else {
            error("Wrong type")
        }
    }

    override fun toSqlString(value: Any): String {
        if (value is Int) {
            return "$value"
        } else {
            error("Wrong type")
        }
    }
}

data class KeyColumn(val column: Column) : Column by column {
    override fun withValue(value: Any): ColumnValue {
        val delegate = column.withValue(value)
        return delegate.copy(column = this)
    }
}

data class AutoGeneratedKeyColumn(val column: KeyColumn) : Column by column {
    override fun withValue(value: Any): ColumnValue {
        val delegate = column.withValue(value)
        return delegate.copy(column = this)
    }
}

interface Table<in T> {

    val name: String
    val columns: Set<Column>

    fun insert(values: Set<ColumnValue>) {
        val nonAutoGeneratedColumns =
                columns.filter { it !is AutoGeneratedKeyColumn }
                        .filter { column -> column.required || values.any { column == it.column } }

        if (values.all { nonAutoGeneratedColumns.contains(it.column) }) {
            val sqlInsert = """
                INSERT INTO $name(${nonAutoGeneratedColumns.map { it.name.value }.joinToString(", ")})
                    VALUES(${values.map { it.column.toSqlString(it.value) }.joinToString(", ")});
            """.trimIndent()

            println(sqlInsert)
        } else {
            error("Oops something went wrong")
        }

    }

    fun insert(thing: T) {
        insert(mapTo(thing))
    }

    fun update(newValues: Set<ColumnValue>) {
        val id = newValues.find { it.column is KeyColumn || it.column is AutoGeneratedKeyColumn }

        if (id != null && columns.contains(id.column)) {
            val sqlUpdate = """
                UPDATE
                    SET ${newValues.filter { it.column !is AutoGeneratedKeyColumn }.map { "${it.column.name.value} = ${it.column.toSqlString(it.value)}" }.joinToString(", ")}
                FROM $name
                    WHERE ${id.column.name.value} = ${id.column.toSqlString(id.value)}
            """.trimIndent()
            println(sqlUpdate)
        } else {
            error("uh oh! Couldn't update!")
        }
    }

    fun update(thing: T) {
        update(mapTo(thing))
    }

    fun delete(columnValue: ColumnValue) {
        val isAnIdentifier = columnValue.column is KeyColumn || columnValue.column is AutoGeneratedKeyColumn
        val tableHasSuchAColumn = columns.contains(columnValue.column)

        if (isAnIdentifier && tableHasSuchAColumn) {
            val sqlDelete = """
                DELETE FROM $name WHERE ${columnValue.column.name.value} = ${columnValue.column.toSqlString(columnValue.value)}
            """.trimIndent()

            println(sqlDelete)
        } else {
            error("Column value is not a key or is not a valid column")
        }
    }

    fun delete(thing: T) {
        val columnValue = mapTo(thing).find { it.column is KeyColumn || it.column is AutoGeneratedKeyColumn }

        if (columnValue != null) {
            delete(columnValue)
        } else {
            error("Can't sorry :(")
        }
    }

    fun mapTo(thing: T): Set<ColumnValue>
}

class UserTable(override val name: String) : Table<User> {

    private val idColumn = AutoGeneratedKeyColumn(KeyColumn(IntColumn(ColumnName("id"), true)))
    private val nameColumn = StringColumn(ColumnName("name"), true)
    private val ageColumn = IntColumn(ColumnName("age"), true)
    private val favColourColumn = StringColumn(ColumnName("fav_colour"), false)

    override val columns = setOf(
            idColumn,
            nameColumn,
            ageColumn,
            favColourColumn
    )

    override fun mapTo(thing: User): Set<ColumnValue> = setOf(
            nameColumn.withValue(thing.name),
            ageColumn.withValue(thing.age),
            favColourColumn.withValue( thing.favColour)
    )
}

data class User(val id: Int = 0, val name: String, val age: Int, val favColour: String)

fun main(args: Array<String>) {

    val userTable = UserTable("user")

    val id = userTable.columns.find { it is AutoGeneratedKeyColumn }!!
    val name = userTable.columns.find { it.name.value == "name" }!!
    val age = userTable.columns.find { it.name.value == "age" }!!
    val favColour = userTable.columns.find { it.name.value == "fav_colour" }!!

    userTable.insert(setOf(
            name.withValue("Bob"),
            age.withValue(29),
            favColour.withValue("Blue")
    ))

    userTable.insert(setOf(
            name.withValue("Bob"),
            age.withValue(29)
    ))

    userTable.delete(id.withValue(1))

    userTable.update(setOf(
            id.withValue(1),
            favColour.withValue("Blue"),
            favColour.withValue("Red")
    ))

    userTable.insert(User(name = "Betty", age = 23, favColour = "Orange"))
}