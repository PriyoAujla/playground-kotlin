package com.priyoaujla

data class ColumnName(val value: String)
data class ColumnValue(val column: Column, val value: Any)

interface Column {
    val name: ColumnName
    val required: Boolean

    fun toColumnValue(value: Any): ColumnValue = ColumnValue(this, value)
    fun toSqlString(value: Any): String

}

interface TypeColumn<in T>: Column {

    fun withValue(value: T): ColumnValue
}


data class StringColumn(override val name: ColumnName, override val required: Boolean) : TypeColumn<String> {

    override fun withValue(value: String) = toColumnValue(value)

    override fun toSqlString(value: Any): String {
        if (value is String) {
            return "'$value'"
        } else {
            error("Wrong type")
        }
    }
}

data class IntColumn(override val name: ColumnName, override val required: Boolean) : TypeColumn<Int> {

    override fun withValue(value: Int) = toColumnValue(value)

    override fun toSqlString(value: Any): String {
        if (value is Int) {
            return "$value"
        } else {
            error("Wrong type")
        }
    }
}

interface IdColumn<in T> : TypeColumn<T>

data class KeyColumn<in T>(val column: TypeColumn<T>) : IdColumn<T> {

    override val name: ColumnName get() = column.name

    override val required: Boolean get() = column.required

    override fun withValue(value: T): ColumnValue {
        val delegate = column.withValue(value)
        return delegate.copy(column = this)
    }

    override fun toSqlString(value: Any): String = column.toSqlString(value)
}

data class AutoGeneratedKeyColumn<in T>(val column: KeyColumn<T>) : IdColumn<T> by column {
    override fun withValue(value: T): ColumnValue {
        val delegate = column.withValue(value)
        return delegate.copy(column = this)
    }
}

abstract class Table<in T> {

    internal abstract val name: String
    internal abstract val columns: Set<Column>

    fun insert(thing: T) {
        insert(mapTo(thing))
    }

    private fun insert(values: Set<ColumnValue>) {
        val nonAutoGeneratedColumns =
                columns.filter { it !is AutoGeneratedKeyColumn<*> }
                        .filter { column -> column.required || values.any { column == it.column } }

        if (values.all { nonAutoGeneratedColumns.contains(it.column) }) {
            val sqlInsert = """
                INSERT INTO $name(${nonAutoGeneratedColumns.map { it.name.value }.joinToString(", ")})
                    VALUES(${values.map { it.column.toSqlString(it.value) }.joinToString(", ")});
            """.trimIndent()

            println(sqlInsert)
        } else {
            error("Oops something went wrong")
        }

    }

    fun update(thing: T) {
        update(mapTo(thing) + uniqueKey(thing))
    }

    private fun update(newValues: Set<ColumnValue>) {
        val id = newValues.find { it.column is IdColumn<*>}

        if (id != null && columns.contains(id.column)) {
            val sqlUpdate = """
                UPDATE
                    SET ${newValues.filter { it.column !is AutoGeneratedKeyColumn<*> }.map { "${it.column.name.value} = ${it.column.toSqlString(it.value)}" }.joinToString(", ")}
                FROM $name
                    WHERE ${id.column.name.value} = ${id.column.toSqlString(id.value)}
            """.trimIndent()
            println(sqlUpdate)
        } else {
            error("uh oh! Couldn't update!")
        }
    }

    fun delete(thing: T) = delete(uniqueKey(thing))

    private fun delete(columnValue: ColumnValue) {
        val isAnIdentifier = columnValue.column is KeyColumn<*> || columnValue.column is AutoGeneratedKeyColumn<*>
        val tableHasSuchAColumn = columns.contains(columnValue.column)

        if (isAnIdentifier && tableHasSuchAColumn) {
            val sqlDelete = """
                DELETE FROM $name WHERE ${columnValue.column.name.value} = ${columnValue.column.toSqlString(columnValue.value)}
            """.trimIndent()

            println(sqlDelete)
        } else {
            error("Column value is not a key or is not a valid column")
        }
    }

    abstract fun mapTo(thing: T): Set<ColumnValue>

    abstract fun uniqueKey(thing: T): ColumnValue
}

class UserTable(override val name: String) : Table<User>() {

    private val idColumn = AutoGeneratedKeyColumn(KeyColumn(IntColumn(ColumnName("id"), true)))
    private val nameColumn = StringColumn(ColumnName("name"), true)
    private val ageColumn = IntColumn(ColumnName("age"), true)
    private val favColourColumn = StringColumn(ColumnName("fav_colour"), false)

    override val columns = setOf(
            idColumn,
            nameColumn,
            ageColumn,
            favColourColumn
    )

    override fun mapTo(thing: User): Set<ColumnValue> = setOf(
            nameColumn.withValue(thing.name),
            ageColumn.withValue(thing.age),
            favColourColumn.withValue( thing.favColour)
    )

    override fun uniqueKey(thing: User) = idColumn.withValue(thing.id)
}

data class User(val id: Int = 0, val name: String, val age: Int, val favColour: String)

fun main(args: Array<String>) {

    val userTable = UserTable("user")
    userTable.insert(User(name = "Betty", age = 23, favColour = "Orange"))
    userTable.delete(User(1, "some name", 34, "fav colour"))
    userTable.update(User(1, "Robert", 34, "Blue"))

}